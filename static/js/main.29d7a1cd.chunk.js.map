{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleTyping","event","console","log","target","value","length","filtered","i","state","employees","name","substring","toLocaleLowerCase","push","setState","filteredEmployees","showFiltered","handleSort","email","this","empsToShow","className","onChange","onClick","map","singleEmp","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8HCgF5BC,G,8DA3Eb,aAAe,IAAD,8BACZ,gBAYFC,aAAe,SAACC,GACdC,QAAQC,IAAI,iBAAkBF,EAAMG,OAAOC,MAAMC,QAIjD,IAFF,IAAIC,EAAW,GAEJC,EAAE,EAAGA,EAAE,EAAKC,MAAMC,UAAUJ,OAAQE,IAC3CN,QAAQC,IAAI,EAAKM,MAAMC,UAAUF,GAAGG,KAAKC,UAAU,EAAEX,EAAMG,OAAOC,MAAMC,SACpE,EAAKG,MAAMC,UAAUF,GAAGG,KAAKC,UAAU,EAAEX,EAAMG,OAAOC,MAAMC,QAAQO,sBAAwBZ,EAAMG,OAAOC,MAAMQ,qBAEjHN,EAASO,KAAK,EAAKL,MAAMC,UAAUF,IAGvCN,QAAQC,IAAII,GACZ,EAAKQ,SAAS,CACZC,kBAAkBT,EAClBU,aAA4C,IAA9BhB,EAAMG,OAAOC,MAAMC,UA5BvB,EAiCdY,WAAa,WACThB,QAAQC,IAAI,qBAhCd,EAAKM,MAAQ,CACXC,UAAU,CACR,CAACC,KAAK,SAASQ,MAAM,qBACrB,CAACR,KAAK,QAAQQ,MAAM,qBACpB,CAACR,KAAK,OAAOQ,MAAM,uBAErBH,kBAAmB,GACnBC,cAAc,GATJ,E,qDAuCdf,QAAQC,IAAI,oBAAqBiB,KAAKX,OAEtC,IAAIY,EAAa,GAUjB,OAR+B,IAA5BD,KAAKX,MAAMQ,aACZI,EAAaD,KAAKX,MAAMO,mBAExBd,QAAQC,IAAI,0CACZkB,EAAaD,KAAKX,MAAMC,WAKxB,yBAAKY,UAAU,OACf,2BAAOC,SAAUH,KAAKpB,eACtB,+BACA,+BACE,wBAAIwB,QAASJ,KAAKF,YAAlB,QACA,sCAEF,+BACCG,EAAWI,KAAI,SAACC,GACf,OACA,4BACE,4BAAKA,EAAUf,MACf,4BAAKe,EAAUP,kB,GAjELQ,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.29d7a1cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component{\n  constructor (){\n    super()\n    this.state = {\n      employees:[\n        {name:\"Ralphe\",email:\"jkhasj@google.com\"},\n        {name:\"Randy\",email:\"jkhasj@google.com\"},\n        {name:\"Stan\",email:\"djkhasj@google.com\"}\n      ],\n      filteredEmployees: [],\n      showFiltered: false\n    }\n  }\n\n  handleTyping = (event) => {\n    console.log(\"We are tyuping\", event.target.value.length)\n\n  var filtered = []\n\n    for (var i=0; i<this.state.employees.length; i++){\n      console.log(this.state.employees[i].name.substring(0,event.target.value.length))\n      if (this.state.employees[i].name.substring(0,event.target.value.length).toLocaleLowerCase() === event.target.value.toLocaleLowerCase()){\n       // console.log(\"We found a match!\",this.state.employees[i])\n        filtered.push(this.state.employees[i])\n      }\n    }\n    console.log(filtered)\n    this.setState({\n      filteredEmployees:filtered,\n      showFiltered: event.target.value.length === 0 ? false : true\n    })\n\n  }\n\n  handleSort = () => {\n      console.log('WE GOT CLICKED!!')\n  }\n\n  render() {\n\n  console.log('this is our state', this.state)\n\n  var empsToShow = []\n\n  if(this.state.showFiltered === true) {\n    empsToShow = this.state.filteredEmployees\n  } else {\n    console.log('WE HIT THE ELSE SHOW REG EMPLOYESSS!!!')\n    empsToShow = this.state.employees\n  }\n   \n\n  return (\n    <div className=\"App\">\n    <input onChange={this.handleTyping}></input>\n    <table>\n    <thead>\n      <td onClick={this.handleSort}>Name</td>\n      <td>Email</td>\n    </thead>\n    <tbody>\n    {empsToShow.map((singleEmp) => {\n      return (\n      <tr>\n        <td>{singleEmp.name}</td>\n        <td>{singleEmp.email}</td>\n      </tr>\n      )\n    })}\n    </tbody>\n    </table>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}